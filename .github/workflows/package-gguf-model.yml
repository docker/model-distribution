name: Package GGUF model

on:
  workflow_dispatch:
    inputs:
      # Single model inputs
      gguf_file_url:
        description: 'URL to the GGUF file (e.g., https://huggingface.co/unsloth/Qwen3-4B-GGUF/resolve/main/Qwen3-4B-Q4_K_M.gguf)'
        required: false
        type: string
      registry_repository:
        description: 'OCI Registry repository'
        required: false
        type: string
      tag:
        description: 'Tag for the Docker image (e.g., 4B-Q4_K_M)'
        required: false
        type: string
      license_url:
        description: 'URL to the license file'
        required: false
        type: string
      mmproj_url:
        description: 'URL to the multimodal projector file (optional, only needed for multimodal models)'
        required: false
        type: string
      # Multi-model input
      models_json:
        description: 'JSON array of models to package (alternative to single model inputs). Format: [{"gguf_url":"https://...", "repository":"repo", "tag":"tag", "license_url":"https://...", "mmproj_url":"https://..."}]'
        required: false
        type: string
      repository_visibility:
        description: 'Repository visibility (private or public)'
        required: false
        type: choice
        options:
          - private
          - public
        default: 'private'

permissions:
  contents: read

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate matrix
        id: set-matrix
        run: |
          if [ -n "${{ inputs.models_json }}" ]; then
            # Use the provided JSON array
            echo '${{ inputs.models_json }}' > models.json
          elif [ -n "${{ inputs.gguf_file_url }}" ]; then
            # Create single-item array for single model
            single_model='[{"gguf_url":"${{ inputs.gguf_file_url }}", "repository":"${{ inputs.registry_repository }}", "tag":"${{ inputs.tag }}", "license_url":"${{ inputs.license_url }}", "mmproj_url":"${{ inputs.mmproj_url }}"}]'
            echo "$single_model" > models.json
          else
            echo "Error: Either provide single model inputs (gguf_file_url, registry_repository, tag) or models_json array"
            exit 1
          fi
          
          # Validate JSON format
          if ! jq empty models.json 2>/dev/null; then
            echo "Error: Invalid JSON format in models_json input"
            exit 1
          fi
          
          # Convert JSON array to GitHub Actions matrix format
          # Each model becomes a separate matrix item with individual properties
          matrix_json=$(jq -r '.[] | {
            gguf_url: .gguf_url,
            repository: .repository,
            tag: .tag,
            license_url: .license_url,
            mmproj_url: .mmproj_url
          }' models.json | jq -s 'map(.)' | jq -c '.')
          
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  package:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        model: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_STAGING }}
          password: ${{ secrets.DOCKER_OAT_STAGING }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: cloud
          endpoint: "${{ secrets.DOCKER_USER_STAGING }}/default"
          install: true

      - name: Create repository with specified visibility
        if: inputs.repository_visibility == 'private'
        run: |
          REPO_NAME="${{ matrix.model.repository }}"
          NAMESPACE="${{ secrets.DOCKER_USER_STAGING }}"
          IS_PRIVATE="${{ inputs.repository_visibility == 'private' && 'true' || 'false' }}"
          
          echo "Creating repository: $NAMESPACE/$REPO_NAME (private: $IS_PRIVATE)"
          
          # Create repository using Docker Hub API
          response=$(curl -s -w "%{http_code}" -o /tmp/create_repo_response.json \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.DOCKER_OAT_STAGING }}" \
            -H "Content-Type: application/json" \
            -d "{\"name\": \"$REPO_NAME\", \"is_private\": $IS_PRIVATE}" \
            "https://hub.docker.com/v2/namespaces/$NAMESPACE/repositories")
          
          http_code="${response: -3}"
          
          if [ "$http_code" = "201" ]; then
            echo "✅ Repository created successfully"
          elif [ "$http_code" = "400" ]; then
            # Repository might already exist, check the error message
            if grep -q "already exists" /tmp/create_repo_response.json 2>/dev/null; then
              echo "ℹ️ Repository already exists, continuing..."
            else
              echo "❌ Error creating repository:"
              cat /tmp/create_repo_response.json
              exit 1
            fi
          else
            echo "❌ Unexpected response code: $http_code"
            cat /tmp/create_repo_response.json
            exit 1
          fi

      - name: Build and push model
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: 'linux/arm64'
          file: ./Dockerfile.gguf
          build-args: |          
            GGUF_FILE_URL=${{ matrix.model.gguf_url }}
            LICENSE_URL=${{ matrix.model.license_url }}
            MMPROJ_URL=${{ matrix.model.mmproj_url }}
            HUB_REPOSITORY=${{ secrets.DOCKER_USER_STAGING }}/${{ matrix.model.repository }}
            TAG=${{ matrix.model.tag }}
          secrets: |
            DOCKER_USERNAME=${{ secrets.DOCKER_USER_STAGING }}
            DOCKER_PASSWORD=${{ secrets.DOCKER_OAT_STAGING }}
