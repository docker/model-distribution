name: Package Safetensors model

on:
  workflow_dispatch:
    inputs:
      # Single model inputs
      huggingface_repository:
        description: 'HuggingFace repository (e.g., HuggingFaceTB/SmolLM2-135M-Instruct)'
        required: false
        type: string
      registry_repository:
        description: 'OCI Registry repository'
        required: true
        type: string
      weights:
        description: 'Model weights tag (e.g., 7B, 13B, medium)'
        required: true
        type: string
      quantization:
        description: 'Quantization type (e.g., Q4_K_M, Q8_0, F16)'
        required: false
        type: string
        default: 'Q4_K_M'
      llama_cpp_tag:
        description: 'Llama.cpp Docker image tag'
        required: true
        type: string
        default: 'full-b5763'
      license_url:
        description: 'URL to the license file'
        required: true
        type: string
      # Multi-model input
      models_json:
        description: 'JSON array of models to package (alternative to single model inputs). Format: [{"hf_repository":"HuggingFaceTB/SmolLM2-135M-Instruct)", "repository":"repo", "weights":"medium", "quantization":"Q4_K_M", "license_url":"https://..."}]'
        required: false
        type: string

permissions:
  contents: read

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      strategy: ${{ steps.determine-strategy.outputs.strategy }}
      matrix: ${{ steps.determine-strategy.outputs.matrix }}
    steps:
      - name: Determine packaging strategy
        id: determine-strategy
        run: |
          if [ -n "${{ inputs.models_json }}" ]; then
            echo "strategy=multi" >> $GITHUB_OUTPUT
            echo "matrix=${{ inputs.models_json }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ inputs.huggingface_repository }}" ]; then
            echo "strategy=single" >> $GITHUB_OUTPUT
            # Create single-item array for matrix strategy
            single_model='[{"hf_repository":"${{ inputs.huggingface_repository }}", "repository":"${{ inputs.registry_repository }}", "weights":"${{ inputs.weights }}", "quantization":"${{ inputs.quantization }}", "llama_cpp_tag":"${{ inputs.llama_cpp_tag }}", "license_url":"${{ inputs.license_url }}"}]'
            echo "matrix=$single_model" >> $GITHUB_OUTPUT
          else
            echo "Error: Either provide single model inputs (huggingface_repository, registry_repository, weights) or models_json array"
            exit 1
          fi

  package:
    needs: validate-inputs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        model: ${{ fromJson(needs.validate-inputs.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_STAGING }}
          password: ${{ secrets.DOCKER_OAT_STAGING }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: cloud
          endpoint: "${{ secrets.DOCKER_USER_STAGING }}/default"
          install: true

      - name: Build and push model
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.safetensors
          platforms: 'linux/amd64'
          build-args: |          
            HUGGINGFACE_REPOSITORY=${{ matrix.model.hf_repository }}
            LICENSE=${{ matrix.model.license_url }}
            HUB_REPOSITORY=${{ secrets.DOCKER_USER_STAGING }}/${{ matrix.model.repository }}
            WEIGHTS=${{ matrix.model.weights }}
            QUANTIZATION=${{ matrix.model.quantization }}
            LLAMA_CPP_TAG=${{ inputs.llama_cpp_tag }}
          secrets: |
            DOCKER_USERNAME=${{ secrets.DOCKER_USER_STAGING }}
            DOCKER_PASSWORD=${{ secrets.DOCKER_OAT_STAGING }}
            HUGGINGFACE_TOKEN=${{ secrets.HUGGINGFACE_TOKEN }}
