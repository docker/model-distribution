name: Package Model

on:
  workflow_dispatch:
    inputs:
      gguf_file_url:
        description: 'URL to the GGUF file (e.g., https://huggingface.co/unsloth/Qwen3-4B-GGUF/resolve/main/Qwen3-4B-Q4_K_M.gguf)'
        required: true
        type: string
      registry_repository:
        description: 'OCI Registry repository'
        required: true
        type: string
        default: 'qwen3'
      tag:
        description: 'Tag for the Docker image (e.g., 4B-Q4_K_M)'
        required: true
        type: string
      input_types:
        description: 'Comma-separated input types (e.g., text,embedding,image)'
        required: true
        type: string
        default: 'text'
      output_types:
        description: 'Comma-separated output types (e.g., text,embedding,image)'
        required: true
        type: string
        default: 'text'
      tool_usage:
        description: 'Enable tool usage support'
        required: false
        type: boolean
        default: false
      license_url:
        description: 'Url to the license file'
        required: true
        type: string
        default: 'https://huggingface.co/datasets/choosealicense/licenses/resolve/main/markdown/apache-2.0.md'

permissions:
  contents: read

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_STAGING }}
          password: ${{ secrets.DOCKER_OAT_STAGING }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: cloud
          endpoint: "${{ secrets.DOCKER_USER_STAGING }}/default"
          install: true

      - name: Build and push model
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: 'linux/arm64'
          build-args: |          
            GGUF_FILE_URL=${{ inputs.gguf_file_url }}
            LICENSE_URL=${{ inputs.license_url }}
            HUB_REPOSITORY=${{ secrets.DOCKER_USER_STAGING }}/${{ inputs.registry_repository }}
            TAG=${{ inputs.tag }}
          secrets: |
            DOCKER_USERNAME=${{ secrets.DOCKER_USER_STAGING }}
            DOCKER_PASSWORD=${{ secrets.DOCKER_OAT_STAGING }}
